{"version":3,"sources":["Support/Paths.js","Components/NavBar.js","Support/Request.js","Repositories/MovieRepository.js","Components/MovieCard.js","Components/MovieGrid.js","Pages/Home.js","Pages/Movie.js","Pages/Search.js","App.js","serviceWorker.js","index.js"],"names":["prefix","PATH_SEARCH","concat","PATH_MOVIE","makeMovieUrl","movieId","NavBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","input","React","createRef","query","URLSearchParams","location","search","get","current","value","decodeURI","e","preventDefault","history","push","encodeURI","react_default","a","createElement","className","react_router_dom","to","onSubmit","bind","type","ref","placeholder","Component","withRouter","instance","axios","create","baseURL","process","page","Request","response","data","status","payload","console","error","_context","t0","_context2","_context3","MovieCard","movie","image","id","src","alt","title","MovieGrid","i","MovieCard_MovieCard","key","movies","length","map","renderMovie","Home","state","loading","total","canLoad","loadMovies","setState","MovieRepository","listPopular","result","items","Array","prototype","apply","_this$state","onClick","disabled","MovieGrid_MovieGrid","renderLoadMoreButton","getMovieIDFromRouteParams","params","Movie","match","loadMovie","genres","isArray","genre","renderLoading","renderImage","target","rel","href","link","renderGenres","description","renderNotFound","getQueryFromLocation","Search","loaded","_this$state2","renderTitle","App","Components_NavBar","react_router","path","exact","component","Boolean","window","hostname","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.76cc5ff0.chunk.js","sourcesContent":["const isProduction = process.env.NODE_ENV === 'production';\nconst prefix = '/' + (isProduction ? 'movie-list/' : '');\n\nexport const PATH_HOME = prefix;\nexport const PATH_SEARCH = `${prefix}search`;\nexport const PATH_MOVIE = `${prefix}movie/:id`;\n\nexport const makeSearchUrl = (query) => encodeURI(`${prefix}search?q=${query}`);\nexport const makeMovieUrl = (movieId) => `${prefix}movie/${movieId}`;\n","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { PATH_HOME, makeSearchUrl } from '../Support/Paths';\n\nclass NavBar extends Component {\n    constructor(props) {\n        super(props);\n        this.input = React.createRef();\n    }\n\n    componentDidMount() {\n        const params = new URLSearchParams(this.props.location.search);\n        const query = params.get('q');\n\n        if (!query) {\n            return;\n        }\n\n        this.input.current.value = decodeURI(query);\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        this.props.history.push(makeSearchUrl(this.input.current.value));\n    }\n\n    render() {\n        return (\n            <nav className=\"w-full fixed top-0 left-0 p-6 flex items-center bg-black text-white\">\n                <div className=\"\">\n                    <Link to={PATH_HOME}>MovieList</Link>\n                </div>\n                <form className=\"flex-1 pl-6\" onSubmit={this.onSubmit.bind(this)}>\n                    <input type=\"text\"\n                            ref={this.input}\n                            className=\"shadow appearance-none border rounded-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                            placeholder=\"Search\" />\n                </form>\n            </nav>\n        );\n    }\n}\n\nexport default withRouter(NavBar);\n","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: process.env.REACT_APP_API_URL,\n});\n\nexport default instance;\n","import Request from '../Support/Request';\n\nclass MovieRepository {\n    async listPopular(page = 1) {\n        try {\n            const response = await Request.get(`/?page=${page}`);\n            \n            if (!response.data.status) {\n                return null;\n            }\n\n            return response.data.payload;\n        } catch (e) {\n            console.error('Error listing movies', e);\n        }\n        \n        return null;\n    }\n\n    async search(query, page = 1) {\n        try {\n            const response = await Request.get(`/search?q=${query}&page=${page}`);\n            \n            if (!response.data.status) {\n                return null;\n            }\n\n            return response.data.payload;\n        } catch (e) {\n            console.error('Error listing movies', e);\n        }\n        \n        return null;\n    }\n\n    async get(movieId) {\n        try {\n            const response = await Request.get(`/get/${movieId}`);\n            \n            if (!response.data.status) {\n                return null;\n            }\n\n            return response.data.payload;\n        } catch (e) {\n            console.error('Error getting movies', e);\n        }\n        \n        return null;\n    }\n}\n\nconst instance = new MovieRepository();\n\nexport default instance;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { makeMovieUrl } from '../Support/Paths';\n\nexport default class MovieCard extends Component {\n    render() {\n        const { movie } = this.props;\n        let image = null;\n\n        if (movie.image) {\n            image = (\n                <div className=\"rounded-t overflow-hidden\">\n                    <Link to={makeMovieUrl(movie.id)}>\n                        <img src={movie.image} alt={movie.title} />\n                    </Link>\n                </div>\n            );\n        }\n\n        return (\n            <div className=\"flex w-1/2 sm:w-1/3 md:w-1/4 xl:w-1/5 px-3 mb-6\">\n                <div className=\"flex-1 flex flex-col border border-white rounded\">\n                    {image}\n                    <div className=\"p-4\">\n                        <Link to={makeMovieUrl(movie.id)}>\n                            {movie.title}\n                        </Link>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport MovieCard from './MovieCard';\n\nexport default class MovieGrid extends Component {\n    renderMovie(movie, i) {\n        return (\n            <MovieCard movie={movie} key={`${movie.id}-${i}`} />\n        );\n    }\n\n    render() {\n        const { movies } = this.props;\n\n        if (!movies) {\n            return null;\n        }\n\n        if (movies.length < 1) {\n            return null;\n        }\n\n        return (\n            <div className=\"flex flex-wrap -mx-3 mt-4\">\n                {movies.map(this.renderMovie.bind(this))}\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport MovieRepository from '../Repositories/MovieRepository';\nimport MovieGrid from '../Components/MovieGrid';\n\nexport default class Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            movies: [],\n            page: 0,\n            total: 0,\n            canLoad: true,\n        };\n    }\n\n    componentDidMount() {\n        this.loadMovies();\n    }\n\n    async loadMovies() {\n        this.setState({ loading: true });\n        const result = await MovieRepository.listPopular(this.state.page + 1);\n\n        if (!result) {\n            this.setState({ loading: false });\n            return;\n        }\n\n        const { page, total, items } = result;\n        let movies = [];\n        Array.prototype.push.apply(movies, this.state.movies);\n        Array.prototype.push.apply(movies, items);\n\n        this.setState({\n            page,\n            total,\n            movies,\n            loading: false,\n            canLoad: total > movies.length,\n        });\n    }\n\n    renderLoadMoreButton() {\n        const { loading, canLoad } = this.state;\n\n        if (!canLoad) {\n            return (\n                <span disabled={true} className=\"btn primary disabled\">\n                    No More Results\n                </span>\n            );\n        }\n\n        return (\n            <button type=\"button\"\n                    onClick={this.loadMovies.bind(this)}\n                    disabled={loading}\n                    className=\"btn primary\">\n                {loading ? 'Loading...' : 'Load More'}\n            </button>\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <h1 className=\"text-3xl font-semibold mb-2\">Popular Movies</h1>\n                <MovieGrid movies={this.state.movies} />\n                {this.renderLoadMoreButton()}\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport MovieRepository from '../Repositories/MovieRepository';\n\nconst getMovieIDFromRouteParams = (params) => {\n    if (!params.id) {\n        return null;\n    }\n\n    return params.id;\n};\n\nexport default class Movie extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            movie: {},\n            movieId: getMovieIDFromRouteParams(props.match.params),\n        };\n    }\n\n    componentDidMount() {\n        this.loadMovie();\n    }\n\n    async loadMovie() {\n        this.setState({ loading: true });\n        const result = await MovieRepository.get(this.state.movieId);\n\n        if (!result) {\n            this.setState({ loading: false, movie: {} });\n            return;\n        }\n\n        this.setState({\n            loading: false,\n            movie: result,\n        });\n    }\n\n    renderLoading() {\n        return (\n            <div>\n                <h1 className=\"text-3xl font-semibold\">Loading</h1>\n            </div>\n        );\n    }\n\n    renderNotFound() {\n        return (\n            <div>\n                <h1 className=\"text-3xl font-semibold mb-4\">Movie not found</h1>\n                <Link className=\"btn primary\" to=\"/\">Back</Link>\n            </div>\n        );\n    }\n\n    renderImage(movie) {\n        if (!movie.image) {\n            return null;\n        }\n\n        return (\n            <div className=\"flex-1 rounded-lg overflow-hidden\">\n                <img src={movie.image} alt={movie.title} />\n            </div>\n        );\n    }\n\n    renderGenres(movie) {\n        if (!movie.genres) {\n            return null;\n        }\n\n        if (!Array.isArray(movie.genres)) {\n            return null;\n        }\n\n        return (\n            <p className=\"badges\">\n                {movie.genres.map(genre => (\n                    <span className=\"badge\" key={genre}>\n                        {genre}\n                    </span>\n                ))}\n            </p>\n        );\n    }\n\n    render() {\n        const { loading, movie } = this.state;\n\n        if (loading) {\n            return this.renderLoading();\n        }\n\n        if (!movie.id) {\n            return this.renderNotFound();\n        }\n\n        return (\n            <div className=\"flex flex-col md:flex-row mt-4\">\n                {this.renderImage(movie)}\n                <div className=\"flex-1 px-0 pt-4 md:px-4 md:pt-0\">\n                    <Link className=\"text-red-500 underline text-sm\" to=\"/\">Back</Link>\n                    <h1 className=\"text-3xl font-semibold leading-none mt-2\">{movie.title}</h1>\n                    <a target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        href={movie.link}\n                        className=\"text-sm underline\">Website</a>\n                    {this.renderGenres(movie)}\n                    <div className=\"mt-6\">\n                        {movie.description}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport MovieRepository from '../Repositories/MovieRepository';\nimport MovieGrid from '../Components/MovieGrid';\n\nconst getQueryFromLocation = (location) => {\n    const params = new URLSearchParams(location.search);\n    return params.get('q');\n};\n\nexport default class Search extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            movies: [],\n            page: 0,\n            total: 0,\n            loaded: false,\n            query: getQueryFromLocation(props.location),\n            canLoad: true,\n        };\n    }\n\n    componentDidMount() {\n        this.loadMovies();\n    }\n\n    async loadMovies() {\n        this.setState({ loading: true });\n        const result = await MovieRepository.search(this.state.query, this.state.page + 1);\n\n        if (!result) {\n            this.setState({ loading: false, loaded: true });\n            return;\n        }\n\n        const { page, total, items } = result;\n        let movies = [];\n        Array.prototype.push.apply(movies, this.state.movies);\n        Array.prototype.push.apply(movies, items);\n        \n        this.setState({\n            page,\n            total,\n            movies,\n            loading: false,\n            loaded: true,\n            canLoad: total > movies.length,\n        });\n    }\n\n    renderTitle() {\n        const { loaded, total, query } = this.state;\n\n        if (!loaded) {\n            return (\n                <h1 className=\"text-3xl font-semibold mb-2\">\n                    Loading\n                </h1>\n            );\n        }\n\n        return (\n            <h1 className=\"text-3xl font-semibold mb-2\">\n                {total} movies found with <em>\"{decodeURI(query)}\"</em>\n            </h1>\n        );\n    }\n\n    renderLoadMoreButton() {\n        const { loaded, loading, canLoad } = this.state;\n\n        if (!loaded) {\n            return null;\n        }\n\n        if (!canLoad) {\n            return (\n                <span disabled={true} className=\"btn primary disabled\">\n                    No More Results\n                </span>\n            );\n        }\n\n        return (\n            <button type=\"button\"\n                    onClick={this.loadMovies.bind(this)}\n                    disabled={loading}\n                    className=\"btn primary\">\n                {loading ? 'Loading...' : 'Load More'}\n            </button>\n        );\n    }\n\n    render() {\n        const { movies } = this.state;\n        return (\n            <div>\n                {this.renderTitle()}\n                {this.renderLoadMoreButton()}\n                <MovieGrid movies={movies} />\n                {this.renderLoadMoreButton()}\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport NavBar from './Components/NavBar';\nimport Home from './Pages/Home';\nimport Movie from './Pages/Movie';\nimport Search from './Pages/Search';\nimport { PATH_HOME, PATH_MOVIE, PATH_SEARCH } from './Support/Paths';\n\nexport default class App extends Component {\n    render() {\n        return (\n            <div className=\"h-full min-h-screen bg-gray-800 text-white p-6 pt-24\">\n                <Router>\n                    <NavBar />\n                    <Route path={PATH_HOME} exact component={Home} />\n                    <Route path={PATH_SEARCH} component={Search} />\n                    <Route path={PATH_MOVIE} component={Movie} />\n                </Router>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}